<?php

namespace App\Notifications;

use App\Models\Contract;
use App\Notifications\Templates\NotificationTemplate;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use Filament\Notifications\Notification as FilamentNotification;

class ContractExpirationNotification extends Notification implements ShouldQueue
{
    use Queueable;

    protected array $templateData;
    protected array $template;

    public function __construct(
        protected Contract $contract,
        protected int $daysUntilExpiration
    ) {
        $this->templateData = [
            'days' => $this->daysUntilExpiration,
            'contract_number' => $this->contract->contract_number,
            'client_name' => $this->contract->client->name,
            'total_amount' => number_format($this->contract->total_amount, 2),
            'end_date' => $this->contract->end_date->format('Y-m-d'),
        ];

        $this->template = NotificationTemplate::get(
            'contract.expiring',
            $this->getUrgencyLevel(),
            $this->templateData
        );
    }

    public function via($notifiable): array
    {
        $channels = ['database'];

        if ($notifiable->notificationSettings?->email_notifications) {
            $channels[] = 'mail';
        }

        return $channels;
    }

    public function toMail($notifiable): MailMessage
    {
        return (new MailMessage)
            ->subject($this->template['subject'])
            ->markdown('emails.contract-notification', [
                'greeting' => $this->template['greeting'],
                'message' => $this->template['message'],
                'details' => [
                    'End Date' => $this->contract->end_date->format('Y-m-d'),
                    'Total Amount' => '$' . number_format($this->contract->total_amount, 2),
                    'Number of Billboards' => $this->contract->billboards()->count(),
                    'Client' => $this->contract->client->name,
                ],
                'actionUrl' => url("/admin/contracts/{$this->contract->id}"),
                'actionText' => 'View Contract',
                'color' => $this->template['color'],
            ]);
    }

    public function toDatabase($notifiable): array
    {
        return [
            'contract_id' => $this->contract->id,
            'message' => $this->template['message'],
            'days_until_expiration' => $this->daysUntilExpiration,
            'urgency' => $this->getUrgencyLevel(),
            'icon' => $this->template['icon'],
            'color' => $this->template['color'],
        ];
    }

    public function toFilament($notifiable): FilamentNotification
    {
        return FilamentNotification::make()
            ->title($this->template['greeting'])
            ->icon($this->template['icon'])
            ->iconColor($this->template['color'])
            ->body($this->template['message'])
            ->actions([
                \Filament\Notifications\Actions\Action::make('view')
                    ->button()
                    ->url(route('filament.admin.resources.contracts.edit', $this->contract))
                    ->markAsRead(),
                \Filament\Notifications\Actions\Action::make('dismiss')
                    ->close(),
            ])
            ->sendToDatabase();
    }

    protected function getUrgencyLevel(): string
    {
        return match(true) {
            $this->daysUntilExpiration <= 7 => 'urgent',
            $this->daysUntilExpiration <= 14 => 'warning',
            default => 'notice',
        };
    }
}
